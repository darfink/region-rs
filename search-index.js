var searchIndex = new Map(JSON.parse('[\
["region",{"doc":"Cross-platform virtual memory API.","t":"FTPGPFPTPPFFFTTTTFIPPTTNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNCNHHNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHH","n":["Allocation","EXECUTE","Err","Error","InvalidParameter","LockGuard","MachCall","NONE","Ok","ProcfsInput","ProtectGuard","Protection","QueryIter","READ","READ_EXECUTE","READ_WRITE","READ_WRITE_EXECUTE","Region","Result","SystemCall","UnmappedRegion","WRITE","WRITE_EXECUTE","all","alloc","alloc_at","as_mut_ptr","as_mut_ptr","as_mut_ptr_range","as_mut_ptr_range","as_ptr","as_ptr","as_ptr_range","as_ptr_range","as_range","as_range","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","default","difference","drop","drop","drop","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into_iter","is_all","is_committed","is_empty","is_empty","is_executable","is_guarded","is_readable","is_shared","is_writable","len","len","lock","next","not","page","partial_cmp","protect","protect_with_handle","protection","query","query_range","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unlock","ceil","floor","size"],"q":[[0,"region"],[160,"region::page"],[163,"core::ops::range"],[164,"core::cmp"],[165,"core::iter::traits::collect"],[166,"core::fmt"],[167,"core::fmt"],[168,"core::hash"],[169,"alloc::string"],[170,"core::result"],[171,"core::any"]],"d":["A handle to an owned region of memory.","Execute access; this may not be allowed depending on DEP.","Contains the error value","A collection of possible errors.","A supplied parameter is invalid.","A RAII implementation of a scoped lock.","A macOS kernel call failed","No access allowed at all.","Contains the success value","A procfs region could not be parsed.","A RAII implementation of a scoped protection guard.","A bitflag of zero or more protection attributes.","An iterator over the <code>Region</code>s that encompass an address …","Read access; writing and/or executing data will panic.","Read and execute shorthand.","Read and write shorthand.","Read, write and execute shorthand.","A descriptor for a mapped memory region.","The result type used by this library.","A system call failed.","The queried memory is unmapped.","Write access; this flag alone may not be supported on all …","Write and execute shorthand.","Returns the set containing all flags.","Allocates one or more pages of memory, with a defined …","Allocates one or more pages of memory, at a specific …","Returns a mutable pointer to the allocation’s base …","Returns a mutable pointer to the region’s base address.","Returns two mutable raw pointers spanning the allocation’…","Returns two mutable raw pointers spanning the region’s …","Returns a pointer to the allocation’s base address.","Returns a pointer to the region’s base address.","Returns two raw pointers spanning the allocation’s …","Returns two raw pointers spanning the region’s address …","Returns a range spanning the allocation’s address space.","Returns a range spanning the region’s address space.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns whether the region is committed or not.","Returns whether region is empty or not.","Returns <code>true</code> if no flags are currently stored.","Returns whether the region is executable or not.","Returns whether the region is guarded or not.","Returns whether the region is readable or not.","Returns whether the region is shared between processes or …","Returns whether the region is writable or not.","Returns the size of the allocation in bytes.","Returns the size of the region in bytes.","Locks one or more memory regions to RAM.","Advances the iterator and returns the next region.","Returns the complement of this set of flags.","Page related functions.","","Changes the memory protection of one or more pages.","Temporarily changes the memory protection of one or more …","Returns the protection attributes of the region.","Queries the OS with an address, returning the region it …","Queries the OS for mapped regions that overlap with the …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unlocks one or more memory regions from RAM.","Rounds an address up to its closest page boundary.","Rounds an address down to its closest page boundary.","Returns the operating system’s page size."],"i":[0,1,4,0,14,0,14,1,4,14,0,0,0,1,1,1,1,0,0,14,14,1,1,1,0,0,3,5,3,5,3,5,3,5,3,5,1,1,1,1,1,1,1,3,10,11,19,14,5,1,3,10,11,19,14,5,1,5,1,5,1,1,1,1,5,1,1,3,10,11,1,5,1,1,14,14,5,1,1,1,1,1,1,3,10,11,19,14,5,1,1,1,1,1,1,1,1,1,3,10,11,19,14,5,1,19,1,5,5,1,5,5,5,5,5,3,5,0,19,1,0,1,0,0,5,0,0,1,1,1,1,1,5,1,14,1,1,3,10,11,19,14,5,1,3,10,11,19,14,5,1,3,10,11,19,14,5,1,1,0,0,0,0],"f":"```````````````````````{{}b}{{db}{{h{f}}}}0{f}{j}{fl}{jl}3210{f{{l{d}}}}{j{{l{d}}}}{{bb}b}{{bb}n}10{bd}21{ce{}{}}0000000000000{jj}{bb}{{ce}n{}{}}0{{bb}A`}2{{bb}Ab}{{}j}{{}b}:{fn}{Adn}{Afn}3{{jj}Ab}6{{bc}n{{Aj{}{{Ah{b}}}}}}{{AlAn}B`}0{{jAn}B`}{{bAn}B`}00000{cc{}}000000{d{{Bb{b}}}}{db}0{cb{{Aj{}{{Ah{b}}}}}}{{bc}nBd}{{bb}n}{{bb}b}{{bb}Ab}{ce{}{}}0000000{bAb}{jAb}0100000{fd}{jd}{d{{h{Ad}}}}{Bf{{Bb{c}}}{}}{bb}`{{bb}{{Bb{A`}}}}{{db}{{h{n}}}}{{db}{{h{Af}}}}{jb}{{}{{h{j}}}}{d{{h{Bf}}}}{{bb}n}{{bbAb}n}{{bb}b}20{ce{}{}}0{cBh{}}04{c{{Bj{e}}}{}{}}0000000000000{cBl{}}0000004{d{{h{n}}}}{{}}0{{}d}","c":[],"p":[[5,"Protection",0],[1,"usize"],[5,"Allocation",0],[8,"Result",0],[5,"Region",0],[5,"Range",163],[1,"unit"],[6,"Ordering",164],[1,"bool"],[5,"LockGuard",0],[5,"ProtectGuard",0],[17,"Item"],[10,"IntoIterator",165],[6,"Error",0],[5,"Formatter",166],[8,"Result",166],[6,"Option",167],[10,"Hasher",168],[5,"QueryIter",0],[5,"String",169],[6,"Result",170],[5,"TypeId",171]],"b":[[74,"impl-Debug-for-Error"],[75,"impl-Display-for-Error"],[77,"impl-Display-for-Protection"],[78,"impl-Debug-for-Protection"],[79,"impl-LowerHex-for-Protection"],[80,"impl-Binary-for-Protection"],[81,"impl-UpperHex-for-Protection"],[82,"impl-Octal-for-Protection"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
